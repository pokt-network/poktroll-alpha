// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poktroll/poktroll/actor.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakeInfo struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CoinsStaked string `protobuf:"bytes,2,opt,name=coinsStaked,proto3" json:"coinsStaked,omitempty"`
}

func (m *StakeInfo) Reset()         { *m = StakeInfo{} }
func (m *StakeInfo) String() string { return proto.CompactTextString(m) }
func (*StakeInfo) ProtoMessage()    {}
func (*StakeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{0}
}
func (m *StakeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeInfo.Merge(m, src)
}
func (m *StakeInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakeInfo proto.InternalMessageInfo

func (m *StakeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StakeInfo) GetCoinsStaked() string {
	if m != nil {
		return m.CoinsStaked
	}
	return ""
}

// Custom parameters for each actor
type WatcherParams struct {
	WatcherSpecificParam string `protobuf:"bytes,1,opt,name=watcher_specific_param,json=watcherSpecificParam,proto3" json:"watcher_specific_param,omitempty"`
}

func (m *WatcherParams) Reset()         { *m = WatcherParams{} }
func (m *WatcherParams) String() string { return proto.CompactTextString(m) }
func (*WatcherParams) ProtoMessage()    {}
func (*WatcherParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{1}
}
func (m *WatcherParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatcherParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatcherParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatcherParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatcherParams.Merge(m, src)
}
func (m *WatcherParams) XXX_Size() int {
	return m.Size()
}
func (m *WatcherParams) XXX_DiscardUnknown() {
	xxx_messageInfo_WatcherParams.DiscardUnknown(m)
}

var xxx_messageInfo_WatcherParams proto.InternalMessageInfo

func (m *WatcherParams) GetWatcherSpecificParam() string {
	if m != nil {
		return m.WatcherSpecificParam
	}
	return ""
}

type PortalParams struct {
	PortalSpecificParam string `protobuf:"bytes,1,opt,name=portal_specific_param,json=portalSpecificParam,proto3" json:"portal_specific_param,omitempty"`
}

func (m *PortalParams) Reset()         { *m = PortalParams{} }
func (m *PortalParams) String() string { return proto.CompactTextString(m) }
func (*PortalParams) ProtoMessage()    {}
func (*PortalParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{2}
}
func (m *PortalParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortalParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortalParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortalParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortalParams.Merge(m, src)
}
func (m *PortalParams) XXX_Size() int {
	return m.Size()
}
func (m *PortalParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PortalParams.DiscardUnknown(m)
}

var xxx_messageInfo_PortalParams proto.InternalMessageInfo

func (m *PortalParams) GetPortalSpecificParam() string {
	if m != nil {
		return m.PortalSpecificParam
	}
	return ""
}

type ServicerParams struct {
	ServicerSpecificParam string `protobuf:"bytes,1,opt,name=servicer_specific_param,json=servicerSpecificParam,proto3" json:"servicer_specific_param,omitempty"`
}

func (m *ServicerParams) Reset()         { *m = ServicerParams{} }
func (m *ServicerParams) String() string { return proto.CompactTextString(m) }
func (*ServicerParams) ProtoMessage()    {}
func (*ServicerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{3}
}
func (m *ServicerParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicerParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicerParams.Merge(m, src)
}
func (m *ServicerParams) XXX_Size() int {
	return m.Size()
}
func (m *ServicerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicerParams.DiscardUnknown(m)
}

var xxx_messageInfo_ServicerParams proto.InternalMessageInfo

func (m *ServicerParams) GetServicerSpecificParam() string {
	if m != nil {
		return m.ServicerSpecificParam
	}
	return ""
}

type ApplicationParams struct {
	ApplicationSpecificParam string `protobuf:"bytes,1,opt,name=application_specific_param,json=applicationSpecificParam,proto3" json:"application_specific_param,omitempty"`
}

func (m *ApplicationParams) Reset()         { *m = ApplicationParams{} }
func (m *ApplicationParams) String() string { return proto.CompactTextString(m) }
func (*ApplicationParams) ProtoMessage()    {}
func (*ApplicationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{4}
}
func (m *ApplicationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationParams.Merge(m, src)
}
func (m *ApplicationParams) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationParams.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationParams proto.InternalMessageInfo

func (m *ApplicationParams) GetApplicationSpecificParam() string {
	if m != nil {
		return m.ApplicationSpecificParam
	}
	return ""
}

// Actor definitions
type Watcher struct {
	StakeInfo     *StakeInfo     `protobuf:"bytes,1,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info,omitempty"`
	WatcherParams *WatcherParams `protobuf:"bytes,2,opt,name=watcher_params,json=watcherParams,proto3" json:"watcher_params,omitempty"`
}

func (m *Watcher) Reset()         { *m = Watcher{} }
func (m *Watcher) String() string { return proto.CompactTextString(m) }
func (*Watcher) ProtoMessage()    {}
func (*Watcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{5}
}
func (m *Watcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Watcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Watcher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Watcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watcher.Merge(m, src)
}
func (m *Watcher) XXX_Size() int {
	return m.Size()
}
func (m *Watcher) XXX_DiscardUnknown() {
	xxx_messageInfo_Watcher.DiscardUnknown(m)
}

var xxx_messageInfo_Watcher proto.InternalMessageInfo

func (m *Watcher) GetStakeInfo() *StakeInfo {
	if m != nil {
		return m.StakeInfo
	}
	return nil
}

func (m *Watcher) GetWatcherParams() *WatcherParams {
	if m != nil {
		return m.WatcherParams
	}
	return nil
}

type Portal struct {
	StakeInfo    *StakeInfo    `protobuf:"bytes,1,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info,omitempty"`
	PortalParams *PortalParams `protobuf:"bytes,2,opt,name=portal_params,json=portalParams,proto3" json:"portal_params,omitempty"`
}

func (m *Portal) Reset()         { *m = Portal{} }
func (m *Portal) String() string { return proto.CompactTextString(m) }
func (*Portal) ProtoMessage()    {}
func (*Portal) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{6}
}
func (m *Portal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Portal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Portal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Portal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Portal.Merge(m, src)
}
func (m *Portal) XXX_Size() int {
	return m.Size()
}
func (m *Portal) XXX_DiscardUnknown() {
	xxx_messageInfo_Portal.DiscardUnknown(m)
}

var xxx_messageInfo_Portal proto.InternalMessageInfo

func (m *Portal) GetStakeInfo() *StakeInfo {
	if m != nil {
		return m.StakeInfo
	}
	return nil
}

func (m *Portal) GetPortalParams() *PortalParams {
	if m != nil {
		return m.PortalParams
	}
	return nil
}

type Servicer struct {
	StakeInfo      *StakeInfo      `protobuf:"bytes,1,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info,omitempty"`
	ServicerParams *ServicerParams `protobuf:"bytes,2,opt,name=servicer_params,json=servicerParams,proto3" json:"servicer_params,omitempty"`
}

func (m *Servicer) Reset()         { *m = Servicer{} }
func (m *Servicer) String() string { return proto.CompactTextString(m) }
func (*Servicer) ProtoMessage()    {}
func (*Servicer) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{7}
}
func (m *Servicer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Servicer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Servicer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Servicer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Servicer.Merge(m, src)
}
func (m *Servicer) XXX_Size() int {
	return m.Size()
}
func (m *Servicer) XXX_DiscardUnknown() {
	xxx_messageInfo_Servicer.DiscardUnknown(m)
}

var xxx_messageInfo_Servicer proto.InternalMessageInfo

func (m *Servicer) GetStakeInfo() *StakeInfo {
	if m != nil {
		return m.StakeInfo
	}
	return nil
}

func (m *Servicer) GetServicerParams() *ServicerParams {
	if m != nil {
		return m.ServicerParams
	}
	return nil
}

type Application struct {
	StakeInfo         *StakeInfo         `protobuf:"bytes,1,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info,omitempty"`
	ApplicationParams *ApplicationParams `protobuf:"bytes,2,opt,name=application_params,json=applicationParams,proto3" json:"application_params,omitempty"`
}

func (m *Application) Reset()         { *m = Application{} }
func (m *Application) String() string { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()    {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{8}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(m, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetStakeInfo() *StakeInfo {
	if m != nil {
		return m.StakeInfo
	}
	return nil
}

func (m *Application) GetApplicationParams() *ApplicationParams {
	if m != nil {
		return m.ApplicationParams
	}
	return nil
}

// Wrapping all actors in one message for potential use cases
type Actor struct {
	// Types that are valid to be assigned to ActorType:
	//
	//	*Actor_Watcher
	//	*Actor_Portal
	//	*Actor_Servicer
	//	*Actor_Application
	ActorType isActor_ActorType `protobuf_oneof:"actor_type"`
}

func (m *Actor) Reset()         { *m = Actor{} }
func (m *Actor) String() string { return proto.CompactTextString(m) }
func (*Actor) ProtoMessage()    {}
func (*Actor) Descriptor() ([]byte, []int) {
	return fileDescriptor_eee787865a5ca3f8, []int{9}
}
func (m *Actor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Actor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Actor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Actor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Actor.Merge(m, src)
}
func (m *Actor) XXX_Size() int {
	return m.Size()
}
func (m *Actor) XXX_DiscardUnknown() {
	xxx_messageInfo_Actor.DiscardUnknown(m)
}

var xxx_messageInfo_Actor proto.InternalMessageInfo

type isActor_ActorType interface {
	isActor_ActorType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Actor_Watcher struct {
	Watcher *Watcher `protobuf:"bytes,1,opt,name=watcher,proto3,oneof" json:"watcher,omitempty"`
}
type Actor_Portal struct {
	Portal *Portal `protobuf:"bytes,2,opt,name=portal,proto3,oneof" json:"portal,omitempty"`
}
type Actor_Servicer struct {
	Servicer *Servicer `protobuf:"bytes,3,opt,name=servicer,proto3,oneof" json:"servicer,omitempty"`
}
type Actor_Application struct {
	Application *Application `protobuf:"bytes,4,opt,name=application,proto3,oneof" json:"application,omitempty"`
}

func (*Actor_Watcher) isActor_ActorType()     {}
func (*Actor_Portal) isActor_ActorType()      {}
func (*Actor_Servicer) isActor_ActorType()    {}
func (*Actor_Application) isActor_ActorType() {}

func (m *Actor) GetActorType() isActor_ActorType {
	if m != nil {
		return m.ActorType
	}
	return nil
}

func (m *Actor) GetWatcher() *Watcher {
	if x, ok := m.GetActorType().(*Actor_Watcher); ok {
		return x.Watcher
	}
	return nil
}

func (m *Actor) GetPortal() *Portal {
	if x, ok := m.GetActorType().(*Actor_Portal); ok {
		return x.Portal
	}
	return nil
}

func (m *Actor) GetServicer() *Servicer {
	if x, ok := m.GetActorType().(*Actor_Servicer); ok {
		return x.Servicer
	}
	return nil
}

func (m *Actor) GetApplication() *Application {
	if x, ok := m.GetActorType().(*Actor_Application); ok {
		return x.Application
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Actor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Actor_Watcher)(nil),
		(*Actor_Portal)(nil),
		(*Actor_Servicer)(nil),
		(*Actor_Application)(nil),
	}
}

func init() {
	proto.RegisterType((*StakeInfo)(nil), "poktroll.poktroll.StakeInfo")
	proto.RegisterType((*WatcherParams)(nil), "poktroll.poktroll.WatcherParams")
	proto.RegisterType((*PortalParams)(nil), "poktroll.poktroll.PortalParams")
	proto.RegisterType((*ServicerParams)(nil), "poktroll.poktroll.ServicerParams")
	proto.RegisterType((*ApplicationParams)(nil), "poktroll.poktroll.ApplicationParams")
	proto.RegisterType((*Watcher)(nil), "poktroll.poktroll.Watcher")
	proto.RegisterType((*Portal)(nil), "poktroll.poktroll.Portal")
	proto.RegisterType((*Servicer)(nil), "poktroll.poktroll.Servicer")
	proto.RegisterType((*Application)(nil), "poktroll.poktroll.Application")
	proto.RegisterType((*Actor)(nil), "poktroll.poktroll.Actor")
}

func init() { proto.RegisterFile("poktroll/poktroll/actor.proto", fileDescriptor_eee787865a5ca3f8) }

var fileDescriptor_eee787865a5ca3f8 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x15, 0x48, 0x9a, 0xe7, 0x24, 0x28, 0x47, 0x0b, 0x6e, 0x00, 0x13, 0x2c, 0x06, 0xa6,
	0x54, 0x4a, 0x50, 0x25, 0x04, 0x4b, 0x23, 0x50, 0x0d, 0x53, 0xb9, 0x0c, 0x48, 0x2c, 0xd1, 0xe1,
	0x38, 0xc5, 0x6a, 0xc8, 0x9d, 0x7c, 0x16, 0x85, 0x91, 0x99, 0x01, 0x24, 0xfe, 0x00, 0xfe, 0x1d,
	0xc6, 0x8e, 0x8c, 0x28, 0xf9, 0x47, 0x90, 0xcf, 0x77, 0xee, 0x1d, 0x75, 0xb3, 0x64, 0xbb, 0xf7,
	0xe3, 0xfb, 0xfc, 0xf9, 0x7d, 0x4f, 0x0f, 0xee, 0x73, 0x76, 0x9a, 0xa5, 0x6c, 0x3e, 0xdf, 0x2f,
	0x1f, 0x34, 0xca, 0x58, 0xda, 0xe7, 0x29, 0xcb, 0x18, 0xee, 0xe8, 0x6c, 0x5f, 0x3f, 0xba, 0x3b,
	0x27, 0xec, 0x84, 0xc9, 0xea, 0x7e, 0xfe, 0x2a, 0x1a, 0x83, 0x23, 0x68, 0x8c, 0x33, 0x7a, 0x1a,
	0xbf, 0x5a, 0xcc, 0x18, 0xf6, 0xa0, 0x4e, 0xa7, 0xd3, 0x34, 0x16, 0xc2, 0x43, 0x3d, 0xf4, 0xb8,
	0x41, 0x74, 0x88, 0x7b, 0xe0, 0x46, 0x2c, 0x59, 0x08, 0xd9, 0x3b, 0xf5, 0xb6, 0x64, 0xd5, 0x4c,
	0x05, 0x2f, 0xa1, 0xf5, 0x96, 0x66, 0xd1, 0x87, 0x38, 0x3d, 0xa6, 0x29, 0xfd, 0x28, 0xf0, 0x13,
	0xb8, 0x7d, 0x56, 0x24, 0x26, 0x82, 0xc7, 0x51, 0x32, 0x4b, 0xa2, 0x09, 0xcf, 0x4b, 0x8a, 0x7b,
	0x47, 0x55, 0xc7, 0xaa, 0x28, 0x61, 0xc1, 0x08, 0x9a, 0xc7, 0x2c, 0xcd, 0xe8, 0x5c, 0xb1, 0x0c,
	0x60, 0x97, 0xcb, 0xb8, 0x9a, 0xe4, 0x56, 0x51, 0xb4, 0x39, 0x42, 0x68, 0x8f, 0xe3, 0xf4, 0x53,
	0x12, 0x95, 0x5a, 0x0e, 0xe0, 0x8e, 0x50, 0x99, 0x6a, 0x9e, 0x5d, 0x5d, 0xb6, 0x99, 0xde, 0x40,
	0xe7, 0x90, 0xf3, 0x79, 0x12, 0xd1, 0x2c, 0x61, 0x0b, 0x45, 0xf6, 0x1c, 0xba, 0xf4, 0x22, 0x59,
	0xcd, 0xe7, 0x19, 0x1d, 0x36, 0xe5, 0x77, 0x04, 0x75, 0x35, 0x28, 0xfc, 0x0c, 0x40, 0xe4, 0xd3,
	0x9b, 0x24, 0x8b, 0x19, 0x93, 0x48, 0x77, 0x70, 0xaf, 0x7f, 0xc9, 0xba, 0x7e, 0xe9, 0x10, 0x69,
	0x88, 0xd2, 0xac, 0x23, 0x68, 0xeb, 0xf9, 0xca, 0x2f, 0x0b, 0xe9, 0x8a, 0x3b, 0xe8, 0x55, 0x10,
	0x58, 0xce, 0x90, 0xd6, 0x99, 0x19, 0x06, 0xdf, 0x10, 0xd4, 0x8a, 0x99, 0x6f, 0x26, 0xe8, 0x05,
	0xb4, 0x94, 0x55, 0x96, 0x9e, 0x07, 0x15, 0x78, 0xd3, 0x62, 0xd2, 0xe4, 0x46, 0x14, 0xfc, 0x44,
	0xb0, 0xad, 0xdd, 0xdb, 0x4c, 0xcf, 0x6b, 0xb8, 0x59, 0x9a, 0x6e, 0x29, 0x7a, 0x58, 0xc5, 0x60,
	0x2d, 0x0c, 0x69, 0x0b, 0x2b, 0x0e, 0x7e, 0x21, 0x70, 0x8d, 0x4d, 0xd8, 0x4c, 0xd8, 0x18, 0xb0,
	0xb9, 0x40, 0x96, 0xb6, 0x47, 0x15, 0x24, 0x97, 0x56, 0x90, 0x74, 0xe8, 0xff, 0xa9, 0xe0, 0xeb,
	0x16, 0xdc, 0x38, 0xcc, 0x2f, 0x00, 0x3e, 0x80, 0xba, 0x32, 0x58, 0x09, 0xeb, 0x5e, 0xbd, 0x11,
	0xa1, 0x43, 0x74, 0x33, 0x1e, 0x42, 0xad, 0x70, 0x42, 0x49, 0xd9, 0xbb, 0xd2, 0xb8, 0xd0, 0x21,
	0xaa, 0x15, 0x3f, 0x85, 0x6d, 0x3d, 0x2a, 0xef, 0x9a, 0x84, 0xdd, 0x5d, 0x33, 0xdd, 0xd0, 0x21,
	0x65, 0x3b, 0x1e, 0x81, 0x6b, 0xfc, 0x86, 0x77, 0x5d, 0xa2, 0xfd, 0xf5, 0xff, 0x1f, 0x3a, 0xc4,
	0x04, 0x8d, 0x9a, 0x00, 0xf2, 0xec, 0x4d, 0xb2, 0x2f, 0x3c, 0x1e, 0x0d, 0x7f, 0x2f, 0x7d, 0x74,
	0xbe, 0xf4, 0xd1, 0xdf, 0xa5, 0x8f, 0x7e, 0xac, 0x7c, 0xe7, 0x7c, 0xe5, 0x3b, 0x7f, 0x56, 0xbe,
	0xf3, 0x6e, 0xaf, 0xbc, 0x92, 0x9f, 0x2f, 0x0e, 0x66, 0x8e, 0x11, 0xef, 0x6b, 0xf2, 0x10, 0x0e,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x5d, 0xe5, 0x8c, 0x52, 0x05, 0x00, 0x00,
}

func (m *StakeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinsStaked) > 0 {
		i -= len(m.CoinsStaked)
		copy(dAtA[i:], m.CoinsStaked)
		i = encodeVarintActor(dAtA, i, uint64(len(m.CoinsStaked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintActor(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatcherParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatcherParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatcherParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WatcherSpecificParam) > 0 {
		i -= len(m.WatcherSpecificParam)
		copy(dAtA[i:], m.WatcherSpecificParam)
		i = encodeVarintActor(dAtA, i, uint64(len(m.WatcherSpecificParam)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PortalParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortalParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortalParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortalSpecificParam) > 0 {
		i -= len(m.PortalSpecificParam)
		copy(dAtA[i:], m.PortalSpecificParam)
		i = encodeVarintActor(dAtA, i, uint64(len(m.PortalSpecificParam)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServicerParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicerParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicerParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServicerSpecificParam) > 0 {
		i -= len(m.ServicerSpecificParam)
		copy(dAtA[i:], m.ServicerSpecificParam)
		i = encodeVarintActor(dAtA, i, uint64(len(m.ServicerSpecificParam)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApplicationSpecificParam) > 0 {
		i -= len(m.ApplicationSpecificParam)
		copy(dAtA[i:], m.ApplicationSpecificParam)
		i = encodeVarintActor(dAtA, i, uint64(len(m.ApplicationSpecificParam)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Watcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Watcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Watcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WatcherParams != nil {
		{
			size, err := m.WatcherParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StakeInfo != nil {
		{
			size, err := m.StakeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Portal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Portal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Portal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortalParams != nil {
		{
			size, err := m.PortalParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StakeInfo != nil {
		{
			size, err := m.StakeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Servicer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Servicer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Servicer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServicerParams != nil {
		{
			size, err := m.ServicerParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StakeInfo != nil {
		{
			size, err := m.StakeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplicationParams != nil {
		{
			size, err := m.ApplicationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StakeInfo != nil {
		{
			size, err := m.StakeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Actor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Actor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Actor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActorType != nil {
		{
			size := m.ActorType.Size()
			i -= size
			if _, err := m.ActorType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Actor_Watcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Actor_Watcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Watcher != nil {
		{
			size, err := m.Watcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Actor_Portal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Actor_Portal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Portal != nil {
		{
			size, err := m.Portal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Actor_Servicer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Actor_Servicer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Servicer != nil {
		{
			size, err := m.Servicer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Actor_Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Actor_Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintActor(dAtA []byte, offset int, v uint64) int {
	offset -= sovActor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	l = len(m.CoinsStaked)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *WatcherParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WatcherSpecificParam)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *PortalParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortalSpecificParam)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *ServicerParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServicerSpecificParam)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *ApplicationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationSpecificParam)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *Watcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeInfo != nil {
		l = m.StakeInfo.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	if m.WatcherParams != nil {
		l = m.WatcherParams.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *Portal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeInfo != nil {
		l = m.StakeInfo.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	if m.PortalParams != nil {
		l = m.PortalParams.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *Servicer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeInfo != nil {
		l = m.StakeInfo.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	if m.ServicerParams != nil {
		l = m.ServicerParams.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeInfo != nil {
		l = m.StakeInfo.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	if m.ApplicationParams != nil {
		l = m.ApplicationParams.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func (m *Actor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActorType != nil {
		n += m.ActorType.Size()
	}
	return n
}

func (m *Actor_Watcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watcher != nil {
		l = m.Watcher.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}
func (m *Actor_Portal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portal != nil {
		l = m.Portal.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}
func (m *Actor_Servicer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Servicer != nil {
		l = m.Servicer.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}
func (m *Actor_Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	return n
}

func sovActor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActor(x uint64) (n int) {
	return sovActor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsStaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinsStaked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatcherParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatcherParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatcherParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatcherSpecificParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WatcherSpecificParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortalParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortalParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortalParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortalSpecificParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortalSpecificParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicerParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicerParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicerParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicerSpecificParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicerSpecificParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationSpecificParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationSpecificParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Watcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Watcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Watcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeInfo == nil {
				m.StakeInfo = &StakeInfo{}
			}
			if err := m.StakeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatcherParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WatcherParams == nil {
				m.WatcherParams = &WatcherParams{}
			}
			if err := m.WatcherParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Portal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Portal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Portal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeInfo == nil {
				m.StakeInfo = &StakeInfo{}
			}
			if err := m.StakeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortalParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PortalParams == nil {
				m.PortalParams = &PortalParams{}
			}
			if err := m.PortalParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Servicer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Servicer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Servicer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeInfo == nil {
				m.StakeInfo = &StakeInfo{}
			}
			if err := m.StakeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicerParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServicerParams == nil {
				m.ServicerParams = &ServicerParams{}
			}
			if err := m.ServicerParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeInfo == nil {
				m.StakeInfo = &StakeInfo{}
			}
			if err := m.StakeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationParams == nil {
				m.ApplicationParams = &ApplicationParams{}
			}
			if err := m.ApplicationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Actor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Actor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Actor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Watcher{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActorType = &Actor_Watcher{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Portal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActorType = &Actor_Portal{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Servicer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActorType = &Actor_Servicer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Application{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActorType = &Actor_Application{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActor = fmt.Errorf("proto: unexpected end of group")
)
