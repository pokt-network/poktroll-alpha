syntax = "proto3";

package poktroll.poktroll;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "poktroll/poktroll/params.proto";
import "poktroll/poktroll/session.proto";
import "poktroll/poktroll/actor.proto";

option go_package = "poktroll/x/poktroll/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/poktroll/poktroll/params";

  }

  // Queries a list of GetSession items.
  rpc GetSession (QueryGetSessionRequest) returns (QueryGetSessionResponse) {
    option (google.api.http).get = "/poktroll/poktroll/get_session";

  }

  // Queries for all staked Servicers
  rpc Servicers (QueryServicersRequest) returns (QueryServicersResponse) {
    option (google.api.http).get = "/poktroll/poktroll/servicers";

  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSessionRequest {}

message QueryGetSessionResponse {
  string placeholder_text = 1;
}

message QueryServicersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryServicersResponse {
  repeated Servicer servicers = 1;

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}