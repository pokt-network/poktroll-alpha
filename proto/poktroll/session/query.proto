syntax = "proto3";

package poktroll.session;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "poktroll/session/params.proto";
import "poktroll/shared/session.proto";

option go_package = "poktroll/x/session/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/poktroll/session/params";

  }

  // Queries a list of GetSession items.
  rpc GetSession (QueryGetSessionRequest) returns (QueryGetSessionResponse) {
    option (google.api.http).get = "/poktroll/session/get_session";

  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSessionRequest {
  uint64 block_height = 1; // height at which the session is being requested
  string app_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string service_id = 3; // TODO_CONSIDER: Should this be a special type of string?
}

message QueryGetSessionResponse {
  poktroll.shared.Session session = 1 [(gogoproto.nullable) = false];
}

