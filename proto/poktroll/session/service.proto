syntax = "proto3";

package poktroll.session;
import "google/protobuf/any.proto";
option (gogoproto.equal_all) = true;
import "gogoproto/gogo.proto";
option go_package = "poktroll/x/session/types";

// TODO_REFACTOR: Should this be in the `session` module or have one of its own? We can argue both are valid options and want to avoid too many "micro modules".
// See the following notion link for more ideas: https://www.notion.so/pocketnetwork/Protobuf-Research-e9f9c1e41d4848a3ba663028a52e8916?pvs=4

// Enum to define various RPC types
enum RPCType {
    UNKNOWN_RPC = 0;
    GRPC = 1;
    WEBSOCKET = 2;
    JSON_RPC = 3;
    // Add new RPC types here as needed
}

// Enum to define configuration options for the endpoint
enum ConfigOptions {
    UNKNOWN_CONFIG = 0;
    TIMEOUT = 1;
    // Add new config options here as needed
}

// NB: proto maps cannot be keyed be enums, so we create a key-value wrapper instead
message ConfigOption {
    ConfigOptions key = 1;
    string value = 2;
}

message Service {
    string id = 1; // unique identifier for the service
    string name = 2; // human-readable name for the service
    repeated Endpoint endpoints = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "endpoints"];
    map<string, google.protobuf.Any> metadata = 4; // metadata to allow for future extensibility
}

message Endpoint {
    string url = 1 [(gogoproto.jsontag) = "url"]; // The URL of the endpoint
    RPCType rpc_type = 2 [(gogoproto.jsontag) = "rpc_type"]; // The type of the RPC
    map<string, string> metadata = 3; // Additional metadata about the endpoint
    repeated ConfigOption configs = 4; // Configuration options for the endpoint
}