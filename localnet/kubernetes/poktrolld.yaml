---
apiVersion: v1
kind: ConfigMap
metadata:
  name: poktroll-scripts
data:
  poktroll.sh: |-
    #!/bin/sh

    if [ ! -d "/root/.poktroll/data/" ]; then
      echo "AUTH_TOKEN is: $AUTH_TOKEN"
      VALIDATOR_NAME=validator1
      CHAIN_ID=poktroll
      KEY_NAME=poktroll-key
      KEY_2_NAME=poktroll-key-2
      TOKEN_AMOUNT="10000000000000000000000000stake"
      STAKING_AMOUNT="1000000000stake"

      # create a random Namespace ID for your rollup to post blocks to
      NAMESPACE_ID=$(openssl rand -hex 10)

      # query the DA Layer start height, in this case we are querying
      # our local devnet at port 26657, the RPC. The RPC endpoint is
      # to allow users to interact with Celestia's nodes by querying
      # the node's state and broadcasting transactions on the Celestia
      # network. The default port is 26657.
      DA_BLOCK_HEIGHT=$(curl http://celestia-rollkit:26657/block | jq -r '.result.block.header.height')

      echo -e "Your NAMESPACE_ID is $NAMESPACE_ID \n\n Your DA_BLOCK_HEIGHT is $DA_BLOCK_HEIGHT"

      # reset any existing genesis/chain data
      # poktrolld tendermint unsafe-reset-all

      ls -la /root/.poktroll/config-src/
      mkdir -p /root/.poktroll/config/
      cp -r -L /root/.poktroll/config-src/* /root/.poktroll/config/
      ls -la /root/.poktroll/config/

      # initialize the validator with the chain ID you set
      # poktrolld init $VALIDATOR_NAME --chain-id $CHAIN_ID

      # add keys for key 1 and key 2 to keyring-backend test
      # poktrolld keys add $KEY_NAME --keyring-backend test
      # poktrolld keys add $KEY_2_NAME --keyring-backend test

      # add these as genesis accounts
      # poktrolld add-genesis-account $KEY_NAME $TOKEN_AMOUNT --keyring-backend test
      # poktrolld add-genesis-account $KEY_2_NAME $TOKEN_AMOUNT --keyring-backend test

      # set the staking amounts in the genesis transaction
      # poktrolld gentx $KEY_NAME $STAKING_AMOUNT --chain-id $CHAIN_ID --keyring-backend test

      # collect genesis transactions
      # poktrolld collect-gentxs
    fi

    # start the node
    # You can attach to this process with delve (dlv) for debugging purpose with `dlv attach $(pgrep poktrolld) --listen :40004 --headless --api-version=2 --accept-multiclient` - run inside the container!
    poktrolld start --rollkit.aggregator true --rollkit.da_layer celestia --rollkit.da_config='{"base_url":"http://celestia-rollkit:26658","timeout":60000000000,"fee":600000,"gas_limit":6000000,"auth_token":"'$AUTH_TOKEN'"}' --rollkit.namespace_id $NAMESPACE_ID --rollkit.da_start_height $DA_BLOCK_HEIGHT --rpc.laddr tcp://127.0.0.1:36657 --p2p.laddr "0.0.0.0:36656"
    # TODO(@okdas): add --servicer  for servicer

    # OR debug the node (uncomment this line but comment previous line)
    # dlv exec /usr/local/bin/poktrolld --listen :40004 --headless --api-version=2 --accept-multiclient -- poktrolld start --rollkit.aggregator true --rollkit.da_layer celestia --rollkit.da_config='{"base_url":"http://celestia-rollkit:26658","timeout":60000000000,"fee":600000,"gas_limit":6000000,"auth_token":"'$AUTH_TOKEN'"}' --rollkit.namespace_id $NAMESPACE_ID --rollkit.da_start_height $DA_BLOCK_HEIGHT --rpc.laddr tcp://127.0.0.1:36657 --p2p.laddr "0.0.0.0:36656"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-secrets
  namespace: default # Replace with the namespace where the secret resides
subjects:
  - kind: ServiceAccount
    name: poktrolld
    namespace: default # Replace with the namespace where the service account resides
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: default # Replace with the namespace where the secret resides
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: poktrolld
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: poktrolld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: poktrolld
  template:
    metadata:
      labels:
        app: poktrolld
    spec:
      serviceAccountName: poktrolld
      containers:
      - name: poktrolld
        image: poktrolld
        # To allow Delve to do the thing
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add: ["SYS_PTRACE"]
        env:
          - name: AUTH_TOKEN
            valueFrom:
              secretKeyRef:
                name: celestia-secret
                key: auth_token
        ports:
        - containerPort: 36657
        - containerPort: 40004
        command: ["/bin/sh"]
        args: ["/scripts/poktroll.sh"]
        volumeMounts:
        - name: scripts-volume
          mountPath: /scripts
        - name: keys-volume
          mountPath: /root/.poktroll/keyring-test/
        - name: configs-volume
          mountPath: /root/.poktroll/config-src/
        # - name: configs-volume
        #   mountPath: /root/.poktroll/config/app.toml
        #   subPath: app.toml
        # - name: configs-volume
        #   mountPath: /root/.poktroll/config/client.toml
        #   subPath: client.toml
        # - name: configs-volume
        #   mountPath: /root/.poktroll/config/config.toml
        #   subPath: config.toml
        # - name: configs-volume
        #   mountPath: /root/.poktroll/config/priv_validator_key.json
        #   subPath: priv_validator_key.json
        # - name: configs-volume
        #   mountPath: /root/.poktroll/config/node_key.json
        #   subPath: node_key.json
        # - name: configs-volume
        #   mountPath: /root/.poktroll/config/genesis.json
        #   subPath: genesis.json
      volumes:
      - name: scripts-volume
        configMap:
          name: poktroll-scripts
      - name: keys-volume
        configMap:
          name: poktrolld-keys
      - name: configs-volume
        configMap:
          name: poktrolld-configs
