// Code generated by MockGen. DO NOT EDIT.
// Source: poktroll/x/session/keeper (interfaces: SessionKeeper)

// Package mocks is a generated GoMock package.
package mocks

import (
	types0 "poktroll/x/session/types"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionKeeper is a mock of SessionKeeper interface.
type MockSessionKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockSessionKeeperMockRecorder
}

// MockSessionKeeperMockRecorder is the mock recorder for MockSessionKeeper.
type MockSessionKeeperMockRecorder struct {
	mock *MockSessionKeeper
}

// NewMockSessionKeeper creates a new mock instance.
func NewMockSessionKeeper(ctrl *gomock.Controller) *MockSessionKeeper {
	mock := &MockSessionKeeper{ctrl: ctrl}
	mock.recorder = &MockSessionKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionKeeper) EXPECT() *MockSessionKeeperMockRecorder {
	return m.recorder
}

// GeSession mocks base method.
func (m *MockSessionKeeper) GeSession(arg0 types.Context, arg1 string) types0.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeSession", arg0, arg1)
	ret0, _ := ret[0].(types0.Session)
	return ret0
}

// GeSession indicates an expected call of GeSession.
func (mr *MockSessionKeeperMockRecorder) GeSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeSession", reflect.TypeOf((*MockSessionKeeper)(nil).GeSession), arg0, arg1)
}
